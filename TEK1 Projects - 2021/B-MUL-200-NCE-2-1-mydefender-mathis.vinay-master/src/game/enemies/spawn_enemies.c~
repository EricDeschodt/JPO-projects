/*
** EPITECH PROJECT, 2021
** B-MUL-200-NCE-2-1-mydefender-mathis.vinay
** File description:
** Handles the path followed by an enemy
*/

#include "../../../include/game/main_game.h"

void manage_enemy(main_game_t *g, int i)
{
    if (is_inmap(g->map, sfSprite_getPosition(g->enemy_list[i]->enemy)) &&
    g->enemy_list[i]->health > 0) {
        pathfinder(g, i, 0.015);
        sfVector2f pos = sfSprite_getPosition(g->enemy_list[i]->enemy);
        float h =  (float)(1080.0 / (float)(get_len_array(g->map) - 1));
        pos.y += h / 2;
        sfSprite_setPosition(g->enemy_list[i]->life_front, pos);
        sfSprite_setPosition(g->enemy_list[i]->life_back, pos);
        sfIntRect rect = {0, 0, (g->enemy_list[i]->health * 92) /
        g->enemy_list[i]->max_health, 16};
        sfSprite_setTextureRect(g->enemy_list[i]->life_front, rect);
    }
    else if (!is_inmap(g->map, sfSprite_getPosition(g->enemy_list[i]->enemy)) &&
    g->enemy_list[i]->health > 0) {
        g->hp -= 10;
        g->enemy_list[i]->health = 0;
    }
}

void add_difficulty(main_game_t *g, double degree)
{
    double dif_to_add = g->difficulty * 0.4 * degree;
    if (dif_to_add > 0.05)
        dif_to_add = 0.05;
    g->difficulty += dif_to_add;
    if (g->difficulty > 1.0)
        g->difficulty = 1.0;
    else if (g->difficulty == 0)
        g->difficulty = 0.001;
    int prec = g->nb_enemies;
    g->nb_enemies = (g->difficulty == 1.0)?(int)(degree * 1.3 *
    g->nb_enemies):(int)(degree * 1.1 * g->nb_enemies);
    if (prec == g->nb_enemies)
        g->nb_enemies += 1;
    g->offset -= 0.2 * degree;
    if (g->offset < 0.5)
        g->offset = 0.5;
    g->homogenity += (g->difficulty > 0.9)?0.5 * degree:-0.2 * degree;
    if (g->homogenity < 0.1)
        g->homogenity = 0.1;
}

void spwn_enemy(enemy_t **enemies)
{
    for (int i = 0; enemies[i]; i++)
        if (!(enemies[i]->is_spawned)) {
            enemies[i]->is_spawned = true;
            return;
        }
}

bool animate_enemies(main_game_t *g)
{
    time_update(g->time, 4);
    for (; g->time->counter_2 >= 16666; g->time->counter_2 -= 16666) {
        for (int i = 0; (g->enemy_list[i] && g->enemy_list[i]->is_spawned); i++)
            manage_enemy(g, i);
    }
    if (g->hp <= 0)
        return false;
    if (!are_all_enemies_dead(g->enemy_list, g->map))
        g->time->counter_3 = 0;
    else
        g->time->counter = 0;
    for (; g->time->counter >= (int)(g->offset * 1000.0) * 1000 && !is_spwnd
        (g->enemy_list); g->time->counter -= (int)(g->offset * 1000.0) * 1000)
        spwn_enemy(g->enemy_list);
    for (; g->time->counter_3 >= 10000000; g->time->counter_3 -= 10000000) {
        g->wave++;
        free_enemy(g->enemy_list);
        g->enemy_list = create_enemy_list(g);
    }
    return true;
}

void display_enemies(main_game_t *g, sfRenderWindow *win)
{
    for (int i = 0; (g->enemy_list[i] && g->enemy_list[i]->is_spawned); i++)
        if (is_inmap(g->map, sfSprite_getPosition(g->enemy_list[i]->enemy)) &&
        g->enemy_list[i]->health > 0) {
            sfRenderWindow_drawSprite(win, g->enemy_list[i]->enemy, NULL);
            sfRenderWindow_drawSprite(win, g->enemy_list[i]->life_back, NULL);
            sfRenderWindow_drawSprite(win, g->enemy_list[i]->life_front, NULL);
        }
}
